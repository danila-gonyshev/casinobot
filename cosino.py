import random
import sqlite3
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart, Command
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler

API_TOKEN = '8168488635:AAF7a_uf9BxpxxSmowZgjgcnVqiVeJEQBcg'

ADMIN_IDS = [1499120550] #–∞–¥–º–∏–Ω –∞–π–¥–∏

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

user_balance = {}
user_registration_date = {}
active_games = {}
user_bets = {}
game_history = {} 

START_BALANCE = 300

class GameStates(StatesGroup):
    waiting_for_bet = State()
    waiting_for_number = State()
    waiting_for_range = State()
    waiting_for_choice = State()

class ReferralStates(StatesGroup):
    waiting_for_referral_id = State()


def create_database():
    conn = sqlite3.connect('casino.db')
    cursor = conn.cursor()


    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        balance INTEGER DEFAULT 0,
        referral_used INTEGER DEFAULT 0,  -- 0 - –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, 1 - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        referrals_count INTEGER DEFAULT 0, -- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        registration_date TEXT
    )
    ''')

    conn.commit()
    conn.close()

def increment_referral_count(referral_user_id: int):
    conn = sqlite3.connect('casino.db')
    cursor = conn.cursor()

    cursor.execute('''
    UPDATE users 
    SET referrals_count = referrals_count + 1 
    WHERE user_id = ?
    ''', (referral_user_id,))

    conn.commit()
    conn.close()


def update_balance_in_db(user_id: int, balance: int):
    conn = sqlite3.connect('casino.db')
    cursor = conn.cursor()

    cursor.execute('''
    INSERT INTO users (user_id, balance) VALUES (?, ?)
    ON CONFLICT(user_id) DO UPDATE SET balance=excluded.balance
    ''', (user_id, balance))

    conn.commit()
    conn.close()

def load_users_from_db():
    conn = sqlite3.connect('casino.db')
    cursor = conn.cursor()

    cursor.execute('SELECT user_id, balance, registration_date FROM users')
    rows = cursor.fetchall()

    for user_id, balance, registration_date in rows:
        user_balance[user_id] = balance
        user_registration_date[user_id] = registration_date
        game_history[user_id] = [] 

    conn.close()


async def add_daily_coins():
    for user_id in user_balance.keys():
        user_balance[user_id] += 300 
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ 300 –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balance[user_id]}.")


scheduler = AsyncIOScheduler()
scheduler.add_job(add_daily_coins, 'interval', days=1)  
scheduler.start()

def home_selection_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å"),KeyboardButton(text="–ò–≥—Ä–∞—Ç—å")],
            [KeyboardButton(text="–ë–∞–ª–∞–Ω—Å"),KeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")],
            [KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä"),KeyboardButton(text="–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã")],
        ],
        resize_keyboard=True
    )
    return keyboard


def game_selection_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé≤ –ö—É–±–∏–∫"),KeyboardButton(text="üéØ –î–∞—Ä—Ç—Å")],
            [KeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª"),KeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª")],
            [KeyboardButton(text="üé≥ –ë–æ—É–ª–∏–Ω–≥"),KeyboardButton(text="üé∞ –°–ª–æ—Ç—ã")],
            [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    return keyboard

def betting_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="10 –º–æ–Ω–µ—Ç"), KeyboardButton(text="50 –º–æ–Ω–µ—Ç"), KeyboardButton(text="100 –º–æ–Ω–µ—Ç")],
            [KeyboardButton(text="200 –º–æ–Ω–µ—Ç"), KeyboardButton(text="500 –º–æ–Ω–µ—Ç"), KeyboardButton(text="1000 –º–æ–Ω–µ—Ç")],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

def cube_betting_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–æ (6x)"), KeyboardButton(text="–°—Ç–∞–≤–∫–∞ –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ (3x)")],
            [KeyboardButton(text="–°—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ 3"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

def cube_rate_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1-2"), KeyboardButton(text="3-4")],
            [KeyboardButton(text="5-6"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

def cube_half_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ë–æ–ª—å—à–µ"), KeyboardButton(text="–ú–µ–Ω—å—à–µ")],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

def back_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

@dp.message(CommandStart())
async def start_game(message: Message):
    user_id = message.from_user.id
    referral_user_id = None  

    if user_id not in user_balance:
        user_balance[user_id] = START_BALANCE
        user_registration_date[user_id] = message.date.strftime('%Y-%m-%d')
        if referral_user_id:
            increment_referral_count(referral_user_id)

        update_balance_in_db(user_id, START_BALANCE)

    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance[user_id]} –º–æ–Ω–µ—Ç.")

@dp.message(Command(commands=['referrals']))
async def show_referrals(message: Message):
    user_id = message.from_user.id
    conn = sqlite3.connect('casino.db')
    cursor = conn.cursor()

    cursor.execute('SELECT referrals_count FROM users WHERE user_id = ?', (user_id,))
    referrals_count = cursor.fetchone()[0]

    await message.answer(f"–£ –≤–∞—Å {referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")
    conn.close()


@dp.message(Command('player_count'))
async def player_count_handler(message: Message):
    if message.from_user.id in ADMIN_IDS:
        count = len(user_balance)  
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {count}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command('top_players'))
async def top_players_handler(message: Message):
    if message.from_user.id in ADMIN_IDS:
        sorted_players = sorted(user_balance.items(), key=lambda x: x[1], reverse=True)[:10]
        top_players_message = "–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:\n"
        for user_id, balance in sorted_players:
            top_players_message += f"ID: {user_id}, –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n"
        await message.answer(top_players_message)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command('set_balance'))
async def set_balance_handler(message: Message):
    if message.from_user.id in ADMIN_IDS:
        try:
            args = message.text.split()
            user_id = int(args[1])
            new_balance = int(args[2])

            if user_id in user_balance:
                user_balance[user_id] = new_balance
                update_balance_in_db(user_id, new_balance) 
                await message.answer(f"–ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ {user_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {new_balance} –º–æ–Ω–µ—Ç.")
                await notify_user_balance_change(user_id, new_balance)
            else:
                await message.answer(f"–ò–≥—Ä–æ–∫ —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except (IndexError, ValueError):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_balance user_id new_balance")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command('set_balance_all'))
async def set_balance_handler(message: Message):
    for user_id in user_balance.keys():
        if user_balance[user_id] < 10:
            user_balance[user_id] += 100
            update_balance_in_db(user_id, user_balance[user_id])
            await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ 100 –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balance[user_id]}.")
    

@dp.message(Command('admin_send_mes'))
async def admin_send_message_handler(message: Message):
    if message.from_user.id in ADMIN_IDS:
        try:
            args = message.text.split(maxsplit=1)
            if len(args) < 2:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                return
            
            message_to_send = args[1]  

            conn = sqlite3.connect('casino.db')
            cursor = conn.cursor()
            cursor.execute('SELECT user_id FROM users')
            users = cursor.fetchall()
            conn.close()
 
            for user in users:
                user_id = user[0]
                try:
                    await bot.send_message(user_id, message_to_send)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command('admin_add'))
async def admin_add_handler(message:  Message):
    if message.from_user.id in ADMIN_IDS:
        try:
            args = message.text.split(maxsplit=1)
            if len(args) < 2:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
                return
            
            admin_id_to_add = int(args[1]) 
            
            if admin_id_to_add not in ADMIN_IDS:
                ADMIN_IDS.append(admin_id_to_add)
                await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            else:
                await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command('admin_show'))
async def admin_show_handler(message: Message):
    if message.from_user.id in ADMIN_IDS:
        try:
            admin_list = "\n".join(str(i) for i in ADMIN_IDS)
            await message.answer(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n{admin_list}")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command('admin_del'))
async def admin_del_handler(message: Message):
    if message.from_user.id in ADMIN_IDS:
        try:
            args = message.text.split(maxsplit=1)
            if len(args) < 2:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return
            
            admin_id_to_remove = int(args[1])  
            
            if admin_id_to_remove in ADMIN_IDS:
                ADMIN_IDS.remove(admin_id_to_remove)
                await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
            else:
                await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def send_message_to_all_users(message_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    for user_id in user_balance.keys():
        try:
            await bot.send_message(user_id, message_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def notify_user_balance_change(user_id: int, new_balance: int):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –µ–≥–æ –±–∞–ª–∞–Ω—Å–∞."""
    if user_id in user_balance:
        await bot.send_message(user_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç.")

@dp.message(F.text == "–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä")
async def game_history_handler(message: Message):
    user_id = message.from_user.id
    history = game_history.get(user_id, [])
    
    if not history:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä.")
        return

    history_message = "–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä:\n"
    for idx, (game, balance) in enumerate(reversed(history[-5:]), start=1): 
        history_message += f"{idx}. –ò–≥—Ä–∞: {game}, –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n"

    await message.answer(history_message)

@dp.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message):
    user_id = message.from_user.id
    registration_date = user_registration_date.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    balance = user_balance.get(user_id, START_BALANCE)
    await message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: {user_id}\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n–ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç.")

@dp.message(F.text == "–ë–∞–ª–∞–Ω—Å")
async def check_balance(message: Message):
    user_id = message.from_user.id
    balance = user_balance.get(user_id, START_BALANCE)
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç.")

@dp.message(F.text == "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
async def referral_system_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id

    conn = sqlite3.connect('casino.db')  
    cursor = conn.cursor()

    cursor.execute("SELECT referral_used FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()

    if user_data is None:
        await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        conn.close()
        return

    referral_used = user_data[0]

    if referral_used == 1:
        await message.answer(f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: `{user_id}`. –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.")
    else:
        await message.answer(f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: `{user_id}`.\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:", parse_mode='Markdown')
        await state.set_state(ReferralStates.waiting_for_referral_id) 

    conn.close()

@dp.message(ReferralStates.waiting_for_referral_id)
async def process_referral_id(message: Message, state: FSMContext):
    user_id = message.from_user.id
    referral_id = message.text.strip()

    if not referral_id.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    referral_id = int(referral_id)

    conn = sqlite3.connect('casino.db')  
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT balance FROM users WHERE user_id = ?", (referral_id,))
        referral_user = cursor.fetchone()

        if referral_user is None:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        cursor.execute("SELECT balance, referral_used FROM users WHERE user_id = ?", (user_id,))
        current_user = cursor.fetchone()

        if current_user is None:
            await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if current_user[1] == 1:
            await message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.")
            return

        current_user_balance = current_user[0] + 200
        referral_user_balance = referral_user[0] + 300

        update_balance_in_db(user_id, current_user_balance)
        update_balance_in_db(referral_id, referral_user_balance)

        user_balance[user_id] += 200
        user_balance[referral_id] += 300

        increment_referral_count(referral_id)

        cursor.execute("SELECT referrals_count FROM users WHERE user_id = ?", (referral_id,))
        updated_referral_count = cursor.fetchone()[0]


        cursor.execute("UPDATE users SET referral_used = 1 WHERE user_id = ?", (user_id,))

        conn.commit()

        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥!\n"
                             f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 200 –º–æ–Ω–µ—Ç (–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {current_user_balance} –º–æ–Ω–µ—Ç).\n")


    except sqlite3.Error as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()  
        conn.close()


@dp.message(F.text == "–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã")
async def projects_handler(message: Message):
    await message.answer("–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏: @danila_gonyshev")

@dp.message(F.text == "–ò–≥—Ä–∞—Ç—å")
async def game_selection_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=game_selection_keyboard())


@dp.message(Command('balance'))
async def check_balance(message: Message):
    user_id = message.from_user.id
    balance = user_balance.get(user_id, START_BALANCE)
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç.")

def update_game_history(user_id, game_name, balance):
    if user_id not in game_history:
        game_history[user_id] = []
    game_history[user_id].append((game_name, balance))

    if len(game_history[user_id]) > 5:
        game_history[user_id].pop(0)


@dp.message(F.text == "üé≤ –ö—É–±–∏–∫")
async def cube_game_selection_handler(message: Message):
    user_id = message.from_user.id
    active_games[user_id] = "cube"
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: –ö—É–±–∏–∫.\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:", reply_markup=cube_betting_keyboard())

@dp.message(F.text.in_(["–°—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–æ (6x)", "–°—Ç–∞–≤–∫–∞ –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ (3x)", "–°—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ 3"]))
async def cube_bet_type_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    bet_type = message.text
    user_bets[user_id] = bet_type  
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {bet_type}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É:", reply_markup=betting_keyboard())
    await state.set_state(GameStates.waiting_for_bet)

@dp.message(F.text.in_(["10 –º–æ–Ω–µ—Ç", "50 –º–æ–Ω–µ—Ç", "100 –º–æ–Ω–µ—Ç","200 –º–æ–Ω–µ—Ç", "500 –º–æ–Ω–µ—Ç", "1000 –º–æ–Ω–µ—Ç"]))
async def bet_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    bet = int(message.text.split(" ")[0])

    if user_id not in user_balance:
        user_balance[user_id] = START_BALANCE

    if user_balance[user_id] < bet:
        await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance[user_id]} –º–æ–Ω–µ—Ç.")
        return

    game = active_games.get(user_id)

    await state.update_data(bet=bet)

    if game == "cube":
        await process_cube_bet(message, bet, state)
    elif game in ["–î–∞—Ä—Ç—Å", "–ë–∞—Å–∫–µ—Ç–±–æ–ª", "–§—É—Ç–±–æ–ª", "–ë–æ—É–ª–∏–Ω–≥"]:
        await process_other_games(message, bet, game)
    elif game == "–°–ª–æ—Ç—ã":
        await process_slots_game(message, bet)  
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.")


@dp.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    user_id = message.from_user.id
    active_games.pop(user_id, None)
    user_bets.pop(user_id, None)
    await state.clear() 
    await message.answer("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã.", reply_markup=game_selection_keyboard())

@dp.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def home_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    user_id = message.from_user.id
    active_games.pop(user_id, None)
    user_bets.pop(user_id, None)
    await state.clear()  
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=home_selection_keyboard())


async def process_cube_bet(message: Message, bet: int, state: FSMContext):
    user_id = message.from_user.id
    bet_type = user_bets[user_id]

    if bet_type == "–°—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–æ (6x)":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å:",reply_markup=back_keyboard())
        await state.set_state(GameStates.waiting_for_number)
    elif bet_type == "–°—Ç–∞–≤–∫–∞ –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ (3x)":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ (1-2, 3-4 –∏–ª–∏ 5-6):", reply_markup=cube_rate_keyboard())
        await state.set_state(GameStates.waiting_for_range)
    elif bet_type == "–°—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ 3":
        await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ 3? (–≤–≤–µ–¥–∏—Ç–µ '–±–æ–ª—å—à–µ' –∏–ª–∏ '–º–µ–Ω—å—à–µ'):", reply_markup=cube_half_keyboard())
        await state.set_state(GameStates.waiting_for_choice)

@dp.message(GameStates.waiting_for_number)
async def number_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        user_bet_number = int(message.text)
        if user_bet_number < 1 or user_bet_number > 6:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.")
        return
    
    data = await state.get_data()
    bet = data.get("bet")

    user_balance[user_id] -= bet

    emoji = 'üé≤'
    data = await bot.send_dice(message.chat.id, emoji=emoji)
    result = data.dice.value

    if result == user_bet_number:
        user_balance[user_id] += bet * 6
        await message.answer(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {bet * 6} –º–æ–Ω–µ—Ç! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balance[user_id]} –º–æ–Ω–µ—Ç.", reply_markup=cube_betting_keyboard())
        update_game_history(user_id, "–ö—É–±–∏–∫ (—á–∏—Å–ª–æ)", user_balance[user_id])
        update_balance_in_db(user_id, user_balance[user_id])  
    else:
        await message.answer(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –º–æ–Ω–µ—Ç. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balance[user_id]} –º–æ–Ω–µ—Ç.",reply_markup=cube_betting_keyboard())
        update_game_history(user_id, "–ö—É–±–∏–∫ (—á–∏—Å–ª–æ)", user_balance[user_id])
        update_balance_in_db(user_id, user_balance[user_id])   
    await state.clear()


@dp.message(GameStates.waiting_for_range)
async def range_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_bet_range = message.text

    if user_bet_range not in ["1-2", "3-4", "5-6"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤: 1-2, 3-4 –∏–ª–∏ 5-6.")
        return

    data = await state.get_data()
    bet = data.get("bet")

    user_balance[user_id] -= bet

    emoji = 'üé≤'
    data = await bot.send_dice(message.chat.id, emoji=emoji)
    result = data.dice.value

    if (user_bet_range == "1-2" and result in [1, 2]) or \
       (user_bet_range == "3-4" and result in [3, 4]) or \
       (user_bet_range == "5-6" and result in [5, 6]):
        user_balance[user_id] += bet * 3
        await message.answer(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {bet * 3} –º–æ–Ω–µ—Ç! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balance[user_id]} –º–æ–Ω–µ—Ç.", reply_markup=cube_betting_keyboard())
        update_game_history(user_id, "–ö—É–±–∏–∫ (–ø—Ä–æ–º–µ–∂—É—Ç–æ–∫)", user_balance[user_id]) 
        update_balance_in_db(user_id, user_balance[user_id])
    else:
        await message.answer(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –º–æ–Ω–µ—Ç. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balance[user_id]} –º–æ–Ω–µ—Ç.", reply_markup=cube_betting_keyboard())
        update_game_history(user_id, "–ö—É–±–∏–∫ (–ø—Ä–æ–º–µ–∂—É—Ç–æ–∫)", user_balance[user_id])
        update_balance_in_db(user_id, user_balance[user_id])  
    await state.clear()  


@dp.message(GameStates.waiting_for_choice)
async def choice_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_choice = message.text.lower()
    data = await state.get_data()
    bet = data.get("bet")

    user_balance[user_id] -= bet

    emoji = 'üé≤'
    data = await bot.send_dice(message.chat.id, emoji=emoji)
    result = data.dice.value

    if (user_choice == "–±–æ–ª—å—à–µ" and result > 3) or (user_choice == "–º–µ–Ω—å—à–µ" and result < 3):
        user_balance[user_id] += bet * 2
        await message.answer(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {bet * 2} –º–æ–Ω–µ—Ç! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balance[user_id]} –º–æ–Ω–µ—Ç.",reply_markup=cube_betting_keyboard())
        update_game_history(user_id, "–ö—É–±–∏–∫ (–±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ)", user_balance[user_id])
        update_balance_in_db(user_id, user_balance[user_id]) 
    else:
        await message.answer(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –º–æ–Ω–µ—Ç. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balance[user_id]} –º–æ–Ω–µ—Ç.", reply_markup=cube_betting_keyboard())
        update_game_history(user_id, "–ö—É–±–∏–∫ (–±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ)", user_balance[user_id]) 
        update_balance_in_db(user_id, user_balance[user_id]) 
    await state.clear()


@dp.message(F.text.in_(["üéØ –î–∞—Ä—Ç—Å", "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", "‚öΩ –§—É—Ç–±–æ–ª", "üé≥ –ë–æ—É–ª–∏–Ω–≥", "üé∞ –°–ª–æ—Ç—ã"]))
async def other_games_handler(message: Message):
    user_id = message.from_user.id

    game = None
    if "–î–∞—Ä—Ç—Å" in message.text:
        game = "–î–∞—Ä—Ç—Å"
    elif "–ë–∞—Å–∫–µ—Ç–±–æ–ª" in message.text:
        game = "–ë–∞—Å–∫–µ—Ç–±–æ–ª"
    elif "–§—É—Ç–±–æ–ª" in message.text:
        game = "–§—É—Ç–±–æ–ª"
    elif "–ë–æ—É–ª–∏–Ω–≥" in message.text:
        game = "–ë–æ—É–ª–∏–Ω–≥"
    elif "–°–ª–æ—Ç—ã" in message.text:
        game = "–°–ª–æ—Ç—ã"

    if game:
        active_games[user_id] = game  
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: {game.capitalize()}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É.", reply_markup=betting_keyboard())

async def process_other_games(message: Message, bet: int, game: str):
    user_id = message.from_user.id

    emoji = None
    multiplier = 0 

    user_balance[user_id] -= bet

    if game == "–î–∞—Ä—Ç—Å":
        emoji = 'üéØ'
    elif game == "–ë–∞—Å–∫–µ—Ç–±–æ–ª":
        emoji = 'üèÄ'
    elif game == "–§—É—Ç–±–æ–ª":
        emoji = '‚öΩ'
    elif game == "–ë–æ—É–ª–∏–Ω–≥":
        emoji = 'üé≥'

    if emoji:
        data = await bot.send_dice(message.chat.id, emoji=emoji)
        result = data.dice.value

        if emoji == 'üéØ':  # –î–∞—Ä—Ç—Å
            if result == 6:
                multiplier = 2  # –ë—É–ª–ª—Å–∞–π - –º–Ω–æ–∂–∏—Ç–µ–ª—å 2
            elif result > 3:
                multiplier = 1  # –•–æ—Ä–æ—à–∏–π –±—Ä–æ—Å–æ–∫ - –º–Ω–æ–∂–∏—Ç–µ–ª—å 1
            else:
                multiplier = 0  # –ü—Ä–æ–º–∞—Ö - –ø—Ä–æ–∏–≥—Ä—ã—à

        elif emoji == 'üèÄ':  # –ë–∞—Å–∫–µ—Ç–±–æ–ª
            if result in [4, 5]:
                multiplier = 2  # –ó–∞–±–∏—Ç—ã–π –º—è—á - –º–Ω–æ–∂–∏—Ç–µ–ª—å 2
            elif result in [1, 2, 3]:
                multiplier = 0  # –ü—Ä–æ–º–∞—Ö - –ø—Ä–æ–∏–≥—Ä—ã—à

        elif emoji == '‚öΩ':  # –§—É—Ç–±–æ–ª
            if result in [4, 5]:
                multiplier = 2  # –ì–æ–ª - –º–Ω–æ–∂–∏—Ç–µ–ª—å 2
            elif result in [1, 2, 3]:
                multiplier = 0  # –ü—Ä–æ–º–∞—Ö - –ø—Ä–æ–∏–≥—Ä—ã—à

        elif emoji == 'üé≥':  # –ë–æ—É–ª–∏–Ω–≥
            if result == 6:
                multiplier = 2  # –í—Å–µ –∫–µ–≥–ª–∏ —Å–±–∏—Ç—ã - –º–Ω–æ–∂–∏—Ç–µ–ª—å 2
            elif result in [4, 5]:
                multiplier = 1  # –•–æ—Ä–æ—à–∏–π –±—Ä–æ—Å–æ–∫ - –º–Ω–æ–∂–∏—Ç–µ–ª—å 1
            elif result == 1:
                multiplier = 0  # –ü—Ä–æ–º–∞—Ö - –ø—Ä–æ–∏–≥—Ä—ã—à


        if multiplier > 0:
            user_balance[user_id] += bet * multiplier
            await message.answer(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {bet * multiplier} –º–æ–Ω–µ—Ç! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balance[user_id]} –º–æ–Ω–µ—Ç.")
            update_game_history(user_id, game.capitalize(), user_balance[user_id]) 
            update_balance_in_db(user_id, user_balance[user_id])  
        else:
            await message.answer(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –º–æ–Ω–µ—Ç. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balance[user_id]} –º–æ–Ω–µ—Ç.")
            update_game_history(user_id, game.capitalize(), user_balance[user_id]) 
            update_balance_in_db(user_id, user_balance[user_id])

@dp.message(F.text == "üé∞ –°–ª–æ—Ç—ã")
async def slots_game_handler(message: Message):
    user_id = message.from_user.id
    active_games[user_id] = "slots"  
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: –°–ª–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É.", reply_markup=betting_keyboard())


def get_combo_text(dice_value: int):
    values = ["BAR", "–≤–∏–Ω–æ–≥—Ä–∞–¥", "–ª–∏–º–æ–Ω", "—Å–µ–º—å"]

    dice_value -= 1
    result = []
    for _ in range(3):
        result.append(values[dice_value % 4])
        dice_value //= 4
    return result

async def process_slots_game(message: Message, bet: int):
    user_id = message.from_user.id

    user_balance[user_id] -= bet

    emoji = 'üé∞'
    data = await bot.send_dice(message.chat.id, emoji=emoji)
    result = data.dice.value
    combo = get_combo_text(result)

    await message.answer(f"–í–∞–º –≤—ã–ø–∞–ª–æ: {' | '.join(combo)}")

    # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–ø–∞–≤—à–µ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    if combo.count("—Å–µ–º—å") == 3:
        multiplier = 10  # –¢—Ä–∏ "—Å–µ–º—å" ‚Äî —Ä–µ–¥–∫–∏–π –∫—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
    elif combo.count("BAR") == 3:
        multiplier = 8  # –¢—Ä–∏ "BAR" ‚Äî —Ç–æ–∂–µ –∫—Ä—É–ø–Ω—ã–π, –Ω–æ —Ä–µ–∂–µ
    elif combo.count("–≤–∏–Ω–æ–≥—Ä–∞–¥") == 3:
        multiplier = 5  # –¢—Ä–∏ "–≤–∏–Ω–æ–≥—Ä–∞–¥" ‚Äî —Å—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à
    elif combo.count("–ª–∏–º–æ–Ω") == 3:
        multiplier = 2  # –¢—Ä–∏ "–ª–∏–º–æ–Ω" ‚Äî –Ω–µ–±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à
    elif combo.count("—Å–µ–º—å") == 2:
        multiplier = 2  # –î–≤–µ "—Å–µ–º—å" ‚Äî –º–∞–ª–µ–Ω—å–∫–∏–π –≤—ã–∏–≥—Ä—ã—à
    elif combo.count("—Å–µ–º—å") == 1:
        multiplier = 1  # –û–¥–Ω–∞ "—Å–µ–º—å" ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
    else:
        multiplier = 0  # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è ‚Äî –ø—Ä–æ–∏–≥—Ä—ã—à

    if multiplier > 0:
        user_balance[user_id] += bet * multiplier
        await message.answer(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {bet * multiplier} –º–æ–Ω–µ—Ç! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balance[user_id]} –º–æ–Ω–µ—Ç.")
        update_game_history(user_id, "–°–ª–æ—Ç—ã", user_balance[user_id]) 
        update_balance_in_db(user_id, user_balance[user_id])  
    else:
        await message.answer(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –º–æ–Ω–µ—Ç. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balance[user_id]} –º–æ–Ω–µ—Ç.")
        update_game_history(user_id, "–°–ª–æ—Ç—ã", user_balance[user_id]) 
        update_balance_in_db(user_id, user_balance[user_id])  

async def main():
    create_database() 
    load_users_from_db()  
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
